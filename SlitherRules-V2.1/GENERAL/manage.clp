
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;                              CSP-RULES / SLITHERRULES
;;;                              MANAGE
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               ;;;                                                    ;;;
               ;;;              copyright Denis Berthier              ;;;
               ;;;     https://denis-berthier.pagesperso-orange.fr    ;;;
               ;;;            January 2006 - August 2020              ;;;
               ;;;                                                    ;;;
               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; -*- clips -*-





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; DETECT CONTRADICTION AND HALT
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Detection of a contradiction.

(defrule no-solution-at-all
	(declare (salience ?*contradiction-salience*))
	(grid ?g)
	(context (name 0))
	?pl <- (technique ?cont&0 BRT)
	;;; if there is csp-variable with no c-value and no candidate
    (csp-variable (name ?csp-var) (type ?type&H|V|N|I))
    (forall (is-csp-variable-for-label (csp-var ?csp-var) (label ?lab))
        (not (candidate (context ?cont) (label ?lab)))
    )
=>
	(printout t crlf "GRID " ?g " HAS NO SOLUTION : NO CANDIDATE FOR CSP-VARIABLE " (type-of-csp-var ?csp-var) (row-name (row-of-csp-var ?csp-var)) (column-name (column-of-csp-var ?csp-var)) crlf)
	(printout t "MOST COMPLEX RULE TRIED = " ?*technique* crlf)
	(if ?*add-instance-to-solved-list* then
		(bind ?*no-sol-list* (union$ ?*no-sol-list* (create$ ?g)))
	)
    (printout t crlf "BEWARE: before concluding that the grid has indeed no solution, consider the following." crlf)
    (printout t "For efficiency reasons, the a priori upper bound on the lengths of the loops is 300, " crlf)
    (printout t "independently of the real upper bound for the given puzzle." crlf)
    (printout t "Check the value of the largest loop found in the above resolution path, say L." crlf)
    (printout t "This loop is probably the solution." crlf)
    (printout t "Set the value of ?*loops-max-length* (in the configuration file) to L-1 and try again." crlf)
	(halt)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; PRINT FINAL STATE IF NO SOLUTION FOUND
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defrule deal-with-unsolved-final-state
	(declare (salience ?*print-unsolved-final-state-salience*))
	(grid ?g)
	(context (name ?cont&0))
    (technique ?cont BRT)
	(not (solution-found ?cont))
=>
	(printout t "PUZZLE " ?g " IS NOT SOLVED. " (- ?*nb-csp-variables*  ?*nb-csp-variables-solved*) " VALUES MISSING." crlf)
	(if ?*add-instance-to-solved-list* then
		(bind ?*not-solved-list* (union$ ?*not-solved-list* (create$ ?g)))
	)
	(if ?*Final-fill*
        then
            (if ?*print-HV-solution* then
                (printout t "filling unsolved HV variables" crlf)
                (assert (fill-HV-variables))
            )
            (if (and ?*Colours* ?*print-IO-solution*) then
                (printout t "filling unsolved IO variables" crlf)
                (assert (fill-IO-variables))
            )
        else (halt)
    )
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; DETECT AND PRINT SOLUTION
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; not yet modified for use with DFS

(defrule detect-solution-in-initial-context
	(declare (salience ?*solution-found-salience*))
	(grid ?g)
	(context (name ?cont&0))
	?brt <- (technique ?cont BRT)
	;;; the presence of H and V c-values for every cell means that a solution has been found
	(forall (csp-variable (name ?csp-var) (type ?type&H|V))
		(exists (is-csp-variable-for-label (csp-var ?csp-var) (label ?lab))
            (candidate (context ?cont) (status c-value) (label ?lab))
		)
	)
    ;;; however, if in-out grid must also be output, we need all the I c-values
    (or
        (test (not (and ?*Colours* ?*print-IO-solution*)))
        (forall (csp-variable (name ?csp-var) (type I))
            (exists (is-csp-variable-for-label (csp-var ?csp-var) (label ?lab))
                (candidate (context ?cont) (status c-value) (label ?lab))
            )
        )
    )
=>
	(retract ?brt)
	(printout t crlf "PUZZLE " ?g " IS SOLVED.")
	(printout t " rating-type = " ?*rating-type* ", MOST COMPLEX RULE TRIED = " ?*technique* crlf)
	(if ?*add-instance-to-solved-list* then
		(bind ?*solved-list* (union$ ?*solved-list* (create$ ?g)))
	)
	(assert (solution-found ?cont))
)


(defrule record-number-of-facts
	(declare (salience ?*solution-found-salience*))
	(grid ?g)
	?sol <- (solution-found ?cont)
=>
	(bind ?*nb-facts* ?sol)
	(if (or ?*print-solution* ?*save-solutions*) 
        then
            (printout t crlf)
            (if ?*print-HV-solution* then
                (assert (build-HV-solution-rows ?*nb-columns* columns))
                (assert (print-HV-solution ?*nb-rows* rows))
            )
            (if (and ?*Colours* ?*print-IO-solution*) then
                (assert (build-IO-solution-rows ?*nb-columns* columns))
                (assert (print-IO-solution ?*nb-rows* rows))
            )
		else (halt)
    )
)	



;;; When the solution has been found (which may be by completing a partial solution),
;;; a fact (solution-found) is asserted.
;;; The following template is used for the various printings of the solution.

(deftemplate c-row
    (slot type) ; IO, H or V
	(slot row)
	(multislot values)
)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; UTILITIES FOR PRINTING THE IO SOLUTION, DEPENDING ON GRID SIZES
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; The following rules are used for printing the IO solution.
;;; The IO solution is printed as a rectangle of size ?*nb-rows* by ?*nb-columns*,
;;; with I-values X (for inside), O (for outside) and - for undecided


(deffunction print-IO-solution-row (?vals)
    (bind ?l (length$ ?vals))
    (bind ?i 1)
    (while (<= ?i ?l)
        (bind ?v (nth$ ?i ?vals))
        (if (eq ?v 2)
            then (printout t "-")
            else (if (eq ?v 0)
                    then (printout t "O")
                    else (printout t "X")
                )
        )
        (bind ?i (+ ?i 1))
    )
    (printout t crlf)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Build IO solution rows, depending on the number of inner columns
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; 2 inner columns

(defrule build-IO-solution-row-2-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 2 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
=>	
	(bind $?vals (create$ ?n1 ?n2))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 3 inner columns

(defrule build-IO-solution-row-3-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 3 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 4 inner columns

(defrule build-IO-solution-row-4-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 4 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 5 inner columns

(defrule build-IO-solution-row-5-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 5 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 6 inner columns

(defrule build-IO-solution-row-6-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 6 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 7 inner columns

(defrule build-IO-solution-row-7-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 7 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 8 inner columns

(defrule build-IO-solution-row-8-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 8 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 9 inner columns

(defrule build-IO-solution-row-9-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 9 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 10 inner columns

(defrule build-IO-solution-row-10-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 10 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 11 inner columns

(defrule build-IO-solution-row-11-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 11 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 12 inner columns

(defrule build-IO-solution-row-12-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 12 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 13 inner columns

(defrule build-IO-solution-row-13-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 13 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 14 inner columns

(defrule build-IO-solution-row-14-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 14 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 15 inner columns

(defrule build-IO-solution-row-15-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 15 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 16 inner columns

(defrule build-IO-solution-row-16-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 16 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type I) (value ?n16) (row ?row) (column 16))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 17 inner columns

(defrule build-IO-solution-row-17-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 17 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type I) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type I) (value ?n17) (row ?row) (column 17))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 18 inner columns

(defrule build-IO-solution-row-18-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 18 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type I) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type I) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type I) (value ?n18) (row ?row) (column 18))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 19 inner columns

(defrule build-IO-solution-row-19-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 19 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type I) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type I) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type I) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type I) (value ?n19) (row ?row) (column 19))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)


;;; 20 inner columns

(defrule build-IO-solution-row-20-cols
	(declare (salience ?*build-IO-solution-salience*))
	(build-IO-solution-rows 20 columns)
    (row ?row&~0&:(<= ?row ?*nb-rows*))
	(ternary-value ?n1)
	(candidate (status c-value) (type I) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type I) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type I) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type I) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type I) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type I) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type I) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type I) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type I) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type I) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type I) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type I) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type I) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type I) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type I) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type I) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type I) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type I) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type I) (value ?n19) (row ?row) (column 19))
	(ternary-value ?n20)
	(candidate (status c-value) (type I) (value ?n20) (row ?row) (column 20))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19 ?n20))
	(assert (c-row (type IO) (row ?row) (values $?vals)))
)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Print IO solution, depending on the number of inner rows
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; 2 inner rows

(defrule print-IO-solution-2-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 2 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 3 inner rows

(defrule print-IO-solution-3-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 3 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 4 inner rows

(defrule print-IO-solution-4-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 4 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 5 inner rows

(defrule print-IO-solution-5-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 5 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 6 inner rows

(defrule print-IO-solution-6-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 6 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 7 inner rows

(defrule print-IO-solution-7-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 7 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 8 inner rows

(defrule print-IO-solution-8-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 8 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 9 inner rows

(defrule print-IO-solution-9-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 9 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 10 inner rows

(defrule print-IO-solution-10-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 10 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 11 inner rows

(defrule print-IO-solution-11-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 11 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 12 inner rows

(defrule print-IO-solution-12-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 12 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 13 inner rows

(defrule print-IO-solution-13-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 13 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 14 inner rows

(defrule print-IO-solution-14-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 14 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 15 inner rows

(defrule print-IO-solution-15-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 15 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 16 inner rows

(defrule print-IO-solution-16-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 16 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
	(c-row (type IO) (row 16) (values $?vP))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
		(print-IO-solution-row $?vP)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 17 inner rows

(defrule print-IO-solution-17-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 17 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
	(c-row (type IO) (row 16) (values $?vP))
	(c-row (type IO) (row 17) (values $?vQ))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
		(print-IO-solution-row $?vP)
		(print-IO-solution-row $?vQ)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 18 inner rows

(defrule print-IO-solution-18-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 18 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
	(c-row (type IO) (row 16) (values $?vP))
	(c-row (type IO) (row 17) (values $?vQ))
	(c-row (type IO) (row 18) (values $?vR))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
		(print-IO-solution-row $?vP)
		(print-IO-solution-row $?vQ)
		(print-IO-solution-row $?vR)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 19 inner rows

(defrule print-IO-solution-19-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 19 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
	(c-row (type IO) (row 16) (values $?vP))
	(c-row (type IO) (row 17) (values $?vQ))
	(c-row (type IO) (row 18) (values $?vR))
	(c-row (type IO) (row 19) (values $?vS))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
		(print-IO-solution-row $?vP)
		(print-IO-solution-row $?vQ)
		(print-IO-solution-row $?vR)
		(print-IO-solution-row $?vS)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)


;;; 20 inner rows

(defrule print-IO-solution-20-rows
	(declare (salience ?*print-IO-solution-salience*))
	(grid ?g)
	(print-IO-solution 20 rows)
	(c-row (type IO) (row 1) (values $?vA))
	(c-row (type IO) (row 2) (values $?vB))
	(c-row (type IO) (row 3) (values $?vC))
	(c-row (type IO) (row 4) (values $?vD))
	(c-row (type IO) (row 5) (values $?vE))
	(c-row (type IO) (row 6) (values $?vF))
	(c-row (type IO) (row 7) (values $?vG))
	(c-row (type IO) (row 8) (values $?vH))
	(c-row (type IO) (row 9) (values $?vI))
	(c-row (type IO) (row 10) (values $?vJ))
	(c-row (type IO) (row 11) (values $?vK))
	(c-row (type IO) (row 12) (values $?vL))
	(c-row (type IO) (row 13) (values $?vM))
	(c-row (type IO) (row 14) (values $?vN))
	(c-row (type IO) (row 15) (values $?vO))
	(c-row (type IO) (row 16) (values $?vP))
	(c-row (type IO) (row 17) (values $?vQ))
	(c-row (type IO) (row 18) (values $?vR))
	(c-row (type IO) (row 19) (values $?vS))
	(c-row (type IO) (row 20) (values $?vT))
=>
	(if ?*print-solution* then
		(print-IO-solution-row $?vA)
		(print-IO-solution-row $?vB)
		(print-IO-solution-row $?vC)
		(print-IO-solution-row $?vD)
		(print-IO-solution-row $?vE)
		(print-IO-solution-row $?vF)
		(print-IO-solution-row $?vG)
		(print-IO-solution-row $?vH)
		(print-IO-solution-row $?vI)
		(print-IO-solution-row $?vJ)
		(print-IO-solution-row $?vK)
		(print-IO-solution-row $?vL)
		(print-IO-solution-row $?vM)
		(print-IO-solution-row $?vN)
		(print-IO-solution-row $?vO)
		(print-IO-solution-row $?vP)
		(print-IO-solution-row $?vQ)
		(print-IO-solution-row $?vR)
		(print-IO-solution-row $?vS)
		(print-IO-solution-row $?vT)
	)
    (printout t crlf)
	(if (not ?*print-HV-solution*) then (halt))
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; UTILITIES FOR PRINTING THE SOLUTION DEPENDING ON GRID SIZES
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(deffunction print-H-solution-row (?vals)
    ;;; ?vals is the sequence of horizontal values (length = ?*nb-columns*)
    (bind ?l (length$ ?vals))
    (printout t ?*point-sign*)
	(bind ?i 1)
	(while (<= ?i ?l) 
        (bind ?v (nth$ ?i ?vals)) 
        (if (eq ?v 2) 
            then (printout t ?*UNDECIDED-horizontal-sign*) 
            else (if (eq ?v 0)
                    then (printout t ?*FALSE-horizontal-sign*)
                    else (printout t ?*TRUE-horizontal-sign*)
                )
        )
        (printout t ?*point-sign*)
        (bind ?i (+ ?i 1))
    )
)


(deffunction print-V-solution-row (?row ?vals)
    ;;; ?vals is the sequence of vertical values for row ?row (length = ?*nb-columns* + 1)
    ;;; we also need to print the givens for this row:
    (bind ?first-given-in-row (+ 1 (* (- ?row 1) ?*nb-columns*)))
    (bind ?last-given-in-row (* ?row ?*nb-columns*))
    (bind ?row-givens (subseq$ ?*givens* ?first-given-in-row ?last-given-in-row))

    (bind ?l (length$ ?vals))
	(bind ?i 1)
	(while (<= ?i ?l) 
        (bind ?v (nth$ ?i ?vals)) 
        (if (eq ?v 2) 
            then (printout t ?*UNDECIDED-vertical-sign*) 
            else (if (eq ?v 0)
                    then (printout t ?*FALSE-vertical-sign*)
                    else (printout t ?*TRUE-vertical-sign*)
                )
        )
        (if (neq ?i ?l) then
            (bind ?given (nth$ ?i ?row-givens))
            (if (eq ?given .) 
                then (printout t ?*no-given-sign*) 
                else (printout t ?*pre-given-sign* ?given ?*post-given-sign*)
            )
        )
        (bind ?i (+ ?i 1))
    )
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Build H solution rows, depending on the number of inner columns
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; 2 inner columns

(defrule build-H-solution-row-2-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 2 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
=>	
	(bind $?vals (create$ ?n1 ?n2))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 3 inner columns

(defrule build-H-solution-row-3-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 3 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 4 inner columns

(defrule build-H-solution-row-4-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 4 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 5 inner columns

(defrule build-H-solution-row-5-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 5 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 6 inner columns

(defrule build-H-solution-row-6-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 6 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 7 inner columns

(defrule build-H-solution-row-7-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 7 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 8 inner columns

(defrule build-H-solution-row-8-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 8 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 9 inner columns

(defrule build-H-solution-row-9-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 9 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 10 inner columns

(defrule build-H-solution-row-10-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 10 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 11 inner columns

(defrule build-H-solution-row-11-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 11 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 12 inner columns

(defrule build-H-solution-row-12-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 12 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 13 inner columns

(defrule build-H-solution-row-13-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 13 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 14 inner columns

(defrule build-H-solution-row-14-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 14 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 15 inner columns

(defrule build-H-solution-row-15-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 15 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 16 inner columns

(defrule build-H-solution-row-16-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 16 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type H) (value ?n16) (row ?row) (column 16))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 17 inner columns

(defrule build-H-solution-row-17-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 17 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type H) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type H) (value ?n17) (row ?row) (column 17))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 18 inner columns

(defrule build-H-solution-row-18-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 18 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type H) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type H) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type H) (value ?n18) (row ?row) (column 18))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 19 inner columns

(defrule build-H-solution-row-19-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 19 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type H) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type H) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type H) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type H) (value ?n19) (row ?row) (column 19))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)


;;; 20 inner columns

(defrule build-H-solution-row-20-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 20 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type H) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type H) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type H) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type H) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type H) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type H) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type H) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type H) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type H) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type H) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type H) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type H) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type H) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type H) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type H) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type H) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type H) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type H) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type H) (value ?n19) (row ?row) (column 19))
	(ternary-value ?n20)
	(candidate (status c-value) (type H) (value ?n20) (row ?row) (column 20))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19 ?n20))
	(assert (c-row (type H) (row ?row) (values $?vals)))
)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Build V solution rows, depending on the number of inner columns
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; 2 inner columns

(defrule build-V-solution-row-2-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 2 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 3 inner columns

(defrule build-V-solution-row-3-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 3 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 4 inner columns

(defrule build-V-solution-row-4-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 4 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 5 inner columns

(defrule build-V-solution-row-5-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 5 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 6 inner columns

(defrule build-V-solution-row-6-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 6 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 7 inner columns

(defrule build-V-solution-row-7-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 7 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 8 inner columns

(defrule build-V-solution-row-8-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 8 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 9 inner columns

(defrule build-V-solution-row-9-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 9 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 10 inner columns

(defrule build-V-solution-row-10-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 10 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 11 inner columns

(defrule build-V-solution-row-11-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 11 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 12 inner columns

(defrule build-V-solution-row-12-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 12 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 13 inner columns

(defrule build-V-solution-row-13-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 13 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 14 inner columns

(defrule build-V-solution-row-14-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 14 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 15 inner columns

(defrule build-V-solution-row-15-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 15 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 16 inner columns

(defrule build-V-solution-row-16-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 16 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type V) (value ?n17) (row ?row) (column 17))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 17 inner columns

(defrule build-V-solution-row-17-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 17 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type V) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type V) (value ?n18) (row ?row) (column 18))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 18 inner columns

(defrule build-V-solution-row-18-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 18 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type V) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type V) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type V) (value ?n19) (row ?row) (column 19))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 19 inner columns

(defrule build-V-solution-row-19-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 19 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type V) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type V) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type V) (value ?n19) (row ?row) (column 19))
	(ternary-value ?n20)
	(candidate (status c-value) (type V) (value ?n20) (row ?row) (column 20))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19 ?n20))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)


;;; 20 inner columns

(defrule build-V-solution-row-20-cols
	(declare (salience ?*build-HV-solution-salience*))
	(build-HV-solution-rows 20 columns)
    (row ?row&~0)
	(ternary-value ?n1)
	(candidate (status c-value) (type V) (value ?n1) (row ?row) (column 1))
	(ternary-value ?n2)
	(candidate (status c-value) (type V) (value ?n2) (row ?row) (column 2))
	(ternary-value ?n3)
	(candidate (status c-value) (type V) (value ?n3) (row ?row) (column 3))
	(ternary-value ?n4)
	(candidate (status c-value) (type V) (value ?n4) (row ?row) (column 4))
	(ternary-value ?n5)
	(candidate (status c-value) (type V) (value ?n5) (row ?row) (column 5))
	(ternary-value ?n6)
	(candidate (status c-value) (type V) (value ?n6) (row ?row) (column 6))
	(ternary-value ?n7)
	(candidate (status c-value) (type V) (value ?n7) (row ?row) (column 7))
	(ternary-value ?n8)
	(candidate (status c-value) (type V) (value ?n8) (row ?row) (column 8))
	(ternary-value ?n9)
	(candidate (status c-value) (type V) (value ?n9) (row ?row) (column 9))
	(ternary-value ?n10)
	(candidate (status c-value) (type V) (value ?n10) (row ?row) (column 10))
	(ternary-value ?n11)
	(candidate (status c-value) (type V) (value ?n11) (row ?row) (column 11))
	(ternary-value ?n12)
	(candidate (status c-value) (type V) (value ?n12) (row ?row) (column 12))
	(ternary-value ?n13)
	(candidate (status c-value) (type V) (value ?n13) (row ?row) (column 13))
	(ternary-value ?n14)
	(candidate (status c-value) (type V) (value ?n14) (row ?row) (column 14))
	(ternary-value ?n15)
	(candidate (status c-value) (type V) (value ?n15) (row ?row) (column 15))
	(ternary-value ?n16)
	(candidate (status c-value) (type V) (value ?n16) (row ?row) (column 16))
	(ternary-value ?n17)
	(candidate (status c-value) (type V) (value ?n17) (row ?row) (column 17))
	(ternary-value ?n18)
	(candidate (status c-value) (type V) (value ?n18) (row ?row) (column 18))
	(ternary-value ?n19)
	(candidate (status c-value) (type V) (value ?n19) (row ?row) (column 19))
	(ternary-value ?n20)
	(candidate (status c-value) (type V) (value ?n20) (row ?row) (column 20))
	(ternary-value ?n21)
	(candidate (status c-value) (type V) (value ?n21) (row ?row) (column 21))
=>	
	(bind $?vals (create$ ?n1 ?n2 ?n3 ?n4 ?n5 ?n6 ?n7 ?n8 ?n9 ?n10 ?n11 ?n12 ?n13 ?n14 ?n15 ?n16 ?n17 ?n18 ?n19 ?n20 ?n21))
	(assert (c-row (type V) (row ?row) (values $?vals)))
)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Print solution, depending on the number of inner rows
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; 2 inner rows

(defrule print-HV-solution-2-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 2 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))

	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 3 inner rows

(defrule print-HV-solution-3-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 3 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))

	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 4 inner rows

(defrule print-HV-solution-4-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 4 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))

	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 5 inner rows

(defrule print-HV-solution-5-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 5 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 6 inner rows

(defrule print-HV-solution-6-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 6 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 7 inner rows

(defrule print-HV-solution-7-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 7 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 8 inner rows

(defrule print-HV-solution-8-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 8 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 9 inner rows

(defrule print-HV-solution-9-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 9 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 10 inner rows

(defrule print-HV-solution-10-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 10 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 11 inner rows

(defrule print-HV-solution-11-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 11 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 12 inner rows

(defrule print-HV-solution-12-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 12 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 13 inner rows

(defrule print-HV-solution-13-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 13 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 14 inner rows

(defrule print-HV-solution-14-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 14 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 15 inner rows

(defrule print-HV-solution-15-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 15 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 16 inner rows

(defrule print-HV-solution-16-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 16 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
	(c-row (type H) (row 17) (values $?vQ))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
	(c-row (type V) (row 16) (values $?vP'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
		(print-V-solution-row 16 $?vP') (printout t crlf)
		(print-H-solution-row $?vQ) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 17 inner rows

(defrule print-HV-solution-17-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 17 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
	(c-row (type H) (row 17) (values $?vQ))
	(c-row (type H) (row 18) (values $?vR))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
	(c-row (type V) (row 16) (values $?vP'))
	(c-row (type V) (row 17) (values $?vQ'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
		(print-V-solution-row 16 $?vP') (printout t crlf)
		(print-H-solution-row $?vQ) (printout t crlf)
		(print-V-solution-row 17 $?vQ') (printout t crlf)
		(print-H-solution-row $?vR) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 18 inner rows

(defrule print-HV-solution-18-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 18 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
	(c-row (type H) (row 17) (values $?vQ))
	(c-row (type H) (row 18) (values $?vR))
	(c-row (type H) (row 19) (values $?vS))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
	(c-row (type V) (row 16) (values $?vP'))
	(c-row (type V) (row 17) (values $?vQ'))
	(c-row (type V) (row 18) (values $?vR'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
		(print-V-solution-row 16 $?vP') (printout t crlf)
		(print-H-solution-row $?vQ) (printout t crlf)
		(print-V-solution-row 17 $?vQ') (printout t crlf)
		(print-H-solution-row $?vR) (printout t crlf)
		(print-V-solution-row 18 $?vR') (printout t crlf)
		(print-H-solution-row $?vS) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 19 inner rows

(defrule print-HV-solution-19-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 19 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
	(c-row (type H) (row 17) (values $?vQ))
	(c-row (type H) (row 18) (values $?vR))
	(c-row (type H) (row 19) (values $?vS))
	(c-row (type H) (row 20) (values $?vT))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
	(c-row (type V) (row 16) (values $?vP'))
	(c-row (type V) (row 17) (values $?vQ'))
	(c-row (type V) (row 18) (values $?vR'))
	(c-row (type V) (row 19) (values $?vS'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
		(print-V-solution-row 16 $?vP') (printout t crlf)
		(print-H-solution-row $?vQ) (printout t crlf)
		(print-V-solution-row 17 $?vQ') (printout t crlf)
		(print-H-solution-row $?vR) (printout t crlf)
		(print-V-solution-row 18 $?vR') (printout t crlf)
		(print-H-solution-row $?vS) (printout t crlf)
		(print-V-solution-row 19 $?vS') (printout t crlf)
		(print-H-solution-row $?vT) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)


;;; 20 inner rows

(defrule print-HV-solution-20-rows
	(declare (salience ?*print-HV-solution-salience*))
	(grid ?g)
	(print-HV-solution 20 rows)
	(c-row (type H) (row 1) (values $?vA))
	(c-row (type H) (row 2) (values $?vB))
	(c-row (type H) (row 3) (values $?vC))
	(c-row (type H) (row 4) (values $?vD))
	(c-row (type H) (row 5) (values $?vE))
	(c-row (type H) (row 6) (values $?vF))
	(c-row (type H) (row 7) (values $?vG))
	(c-row (type H) (row 8) (values $?vH))
	(c-row (type H) (row 9) (values $?vI))
	(c-row (type H) (row 10) (values $?vJ))
	(c-row (type H) (row 11) (values $?vK))
	(c-row (type H) (row 12) (values $?vL))
	(c-row (type H) (row 13) (values $?vM))
	(c-row (type H) (row 14) (values $?vN))
	(c-row (type H) (row 15) (values $?vO))
	(c-row (type H) (row 16) (values $?vP))
	(c-row (type H) (row 17) (values $?vQ))
	(c-row (type H) (row 18) (values $?vR))
	(c-row (type H) (row 19) (values $?vS))
	(c-row (type H) (row 20) (values $?vT))
	(c-row (type H) (row 21) (values $?vU))
    
	(c-row (type V) (row 1) (values $?vA'))
	(c-row (type V) (row 2) (values $?vB'))
	(c-row (type V) (row 3) (values $?vC'))
	(c-row (type V) (row 4) (values $?vD'))
	(c-row (type V) (row 5) (values $?vE'))
	(c-row (type V) (row 6) (values $?vF'))
	(c-row (type V) (row 7) (values $?vG'))
	(c-row (type V) (row 8) (values $?vH'))
	(c-row (type V) (row 9) (values $?vI'))
	(c-row (type V) (row 10) (values $?vJ'))
	(c-row (type V) (row 11) (values $?vK'))
	(c-row (type V) (row 12) (values $?vL'))
	(c-row (type V) (row 13) (values $?vM'))
	(c-row (type V) (row 14) (values $?vN'))
	(c-row (type V) (row 15) (values $?vO'))
	(c-row (type V) (row 16) (values $?vP'))
	(c-row (type V) (row 17) (values $?vQ'))
	(c-row (type V) (row 18) (values $?vR'))
	(c-row (type V) (row 19) (values $?vS'))
	(c-row (type V) (row 20) (values $?vT'))
=>
	(if ?*print-solution* then
		(print-H-solution-row $?vA) (printout t crlf)
		(print-V-solution-row 1 $?vA') (printout t crlf)
		(print-H-solution-row $?vB) (printout t crlf)
		(print-V-solution-row 2 $?vB') (printout t crlf)
		(print-H-solution-row $?vC) (printout t crlf)
		(print-V-solution-row 3 $?vC') (printout t crlf)
		(print-H-solution-row $?vD) (printout t crlf)
		(print-V-solution-row 4 $?vD') (printout t crlf)
		(print-H-solution-row $?vE) (printout t crlf)
		(print-V-solution-row 5 $?vE') (printout t crlf)
		(print-H-solution-row $?vF) (printout t crlf)
		(print-V-solution-row 6 $?vF') (printout t crlf)
		(print-H-solution-row $?vG) (printout t crlf)
		(print-V-solution-row 7 $?vG') (printout t crlf)
		(print-H-solution-row $?vH) (printout t crlf)
		(print-V-solution-row 8 $?vH') (printout t crlf)
		(print-H-solution-row $?vI) (printout t crlf)
		(print-V-solution-row 9 $?vI') (printout t crlf)
		(print-H-solution-row $?vJ) (printout t crlf)
		(print-V-solution-row 10 $?vJ') (printout t crlf)
		(print-H-solution-row $?vK) (printout t crlf)
		(print-V-solution-row 11 $?vK') (printout t crlf)
		(print-H-solution-row $?vL) (printout t crlf)
		(print-V-solution-row 12 $?vL') (printout t crlf)
		(print-H-solution-row $?vM) (printout t crlf)
		(print-V-solution-row 13 $?vM') (printout t crlf)
		(print-H-solution-row $?vN) (printout t crlf)
		(print-V-solution-row 14 $?vN') (printout t crlf)
		(print-H-solution-row $?vO) (printout t crlf)
		(print-V-solution-row 15 $?vO') (printout t crlf)
		(print-H-solution-row $?vP) (printout t crlf)
		(print-V-solution-row 16 $?vP') (printout t crlf)
		(print-H-solution-row $?vQ) (printout t crlf)
		(print-V-solution-row 17 $?vQ') (printout t crlf)
		(print-H-solution-row $?vR) (printout t crlf)
		(print-V-solution-row 18 $?vR') (printout t crlf)
		(print-H-solution-row $?vS) (printout t crlf)
		(print-V-solution-row 19 $?vS') (printout t crlf)
		(print-H-solution-row $?vT) (printout t crlf)
		(print-V-solution-row 20 $?vT') (printout t crlf)
		(print-H-solution-row $?vU) (printout t crlf)
	)
    (printout t crlf)
	(halt)
)







