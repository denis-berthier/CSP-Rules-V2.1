
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;                              CSP-RULES / SUDORULES
;;;                              3-DIGIT IMPOSSIBLE PATTERN: Imp630-14c#84  (EL14c84)
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               ;;;                                                    ;;;
               ;;;              copyright Denis Berthier              ;;;
               ;;;     https://denis-berthier.pagesperso-orange.fr    ;;;
               ;;;            January 2006 - February 2023            ;;;
               ;;;                                                    ;;;
               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; -*- clips -*-





;;; The rules in this file have been automatically generated by the CSP-Rules generator,
;;; based on the following pattern, one among the 630 3-digit impossible patterns found by eleven.
;;;

;;;     +-------+-------+-------+
;;;     ! . . . ! . . . ! . . X ! 
;;;     ! . . X ! . . X ! . . X ! 
;;;     ! . X . ! . X . ! . X . ! 
;;;     +-------+-------+-------+
;;;     ! . . . ! . . X ! X X . ! 
;;;     ! . . X ! . X . ! . . . ! 
;;;     ! . X . ! . . . ! . . X ! 
;;;     +-------+-------+-------+
;;;     ! . . . ! . . . ! . . . ! 
;;;     ! . . . ! . . . ! . . . ! 
;;;     ! . . . ! . . . ! . . . ! 
;;;     +-------+-------+-------+
;;;
;;; ........X..X..X..X.X..X..X......XXX...X.X.....X......X...........................
;;;
;;; Variables in the following rule are named after this pattern



(defrule activate-3-digit-pattern-rule-EL14c84
   (declare (salience ?*activate-ork-Imp630-14c-salience*))
   (logical
      (play)
      (context (name ?cont))
   )
=>
   (if ?*print-levels* then (printout t Entering_level EL14c84))
   (assert (3-digit-pattern "........X..X..X..X.X..X..X......XXX...X.X.....X......X..........................."))
)


(defrule 3-digit-pattern-rule-EL14c84
   (declare (salience ?*ork-Imp630-14c-salience*))
   (number ?nb1)
   (number ?nb2&:(< ?nb1 ?nb2))
   (number ?nb3&:(< ?nb2 ?nb3))
   
   (3-digit-pattern ?pattern-string)
   (test (eq (str-compare ?pattern-string "........X..X..X..X.X..X..X......XXX...X.X.....X......X..........................." ) 0))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row1) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row1) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row1) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row2&~?row1) (column ?col3&~?col9) (block ?blk1&~?blk3) (band ?bnd1) (stack ?stk1&~?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row2) (column ?col3) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row2) (column ?col3) (block ?blk1) (band ?bnd1) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row2) (column ?col6&~?col9&~?col3) (block ?blk2&~?blk3&~?blk1) (band ?bnd1) (stack ?stk2&~?stk3&~?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row2) (column ?col6) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row2) (column ?col6) (block ?blk2) (band ?bnd1) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row2) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row2) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row2) (column ?col9) (block ?blk3) (band ?bnd1) (stack ?stk3))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row3&~?row1&~?row2) (column ?col2&~?col9&~?col3&~?col6) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row3) (column ?col2) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row3) (column ?col2) (block ?blk1) (band ?bnd1) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row3) (column ?col5&~?col9&~?col3&~?col6&~?col2) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row3) (column ?col5) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row3) (column ?col5) (block ?blk2) (band ?bnd1) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row3) (column ?col8&~?col9&~?col3&~?col6&~?col2&~?col5) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row3) (column ?col8) (block ?blk3) (band ?bnd1) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row3) (column ?col8) (block ?blk3) (band ?bnd1) (stack ?stk3))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row4&~?row1&~?row2&~?row3) (column ?col6) (block ?blk5&~?blk3&~?blk1&~?blk2) (band ?bnd2&~?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row4) (column ?col6) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row4) (column ?col6) (block ?blk5) (band ?bnd2) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row4) (column ?col7&~?col9&~?col3&~?col6&~?col2&~?col5&~?col8) (block ?blk6&~?blk3&~?blk1&~?blk2&~?blk5) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row4) (column ?col7) (block ?blk6) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row4) (column ?col7) (block ?blk6) (band ?bnd2) (stack ?stk3))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row4) (column ?col8) (block ?blk6) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row4) (column ?col8) (block ?blk6) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row4) (column ?col8) (block ?blk6) (band ?bnd2) (stack ?stk3))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row5&~?row1&~?row2&~?row3&~?row4) (column ?col3) (block ?blk4&~?blk3&~?blk1&~?blk2&~?blk5&~?blk6) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row5) (column ?col3) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row5) (column ?col3) (block ?blk4) (band ?bnd2) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row5) (column ?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row5) (column ?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row5) (column ?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row6&~?row1&~?row2&~?row3&~?row4&~?row5) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row6) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row6) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row6) (column ?col9) (block ?blk6) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row6) (column ?col9) (block ?blk6) (band ?bnd2) (stack ?stk3))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row6) (column ?col9) (block ?blk6) (band ?bnd2) (stack ?stk3))

=>

   ;;; find the additional candidates ("guardians")
   (bind ?nb-real-guardians 0)
   (bind ?real-guardians (create$))
   (foreach ?row ?*rows*
      (foreach ?col ?*columns*
         (bind ?cll (cell-index ?row ?col))
         (bind ?entry (sub-string ?cll ?cll ?pattern-string))
         ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
         
         ;;; if the cell belongs to the pattern,
         (if (or (eq ?entry "1") (eq ?entry "X")) then
         
            ;;; add the relevant real guardians:
            (do-for-all-facts
               ((?c candidate))
               (and  (eq ?c:status cand)
                  (neq ?c:number ?nb1)
                  (neq ?c:number ?nb2)
                  (neq ?c:number ?nb3)
                  (eq ?c:row
                     (switch ?row
                        (case 1 then ?row1)
                        (case 2 then ?row2)
                        (case 3 then ?row3)
                        (case 4 then ?row4)
                        (case 5 then ?row5)
                        (case 6 then ?row6)
                     )
                  )
                  (eq ?c:column
                     (switch ?col
                        (case 2 then ?col2)
                        (case 3 then ?col3)
                        (case 5 then ?col5)
                        (case 6 then ?col6)
                        (case 7 then ?col7)
                        (case 8 then ?col8)
                        (case 9 then ?col9)
                     )
                  )
               )
               (bind ?nb-real-guardians (+ ?nb-real-guardians 1))
               (bind ?real-guardians (create$ ?real-guardians ?c:label))
            )
         )
      )
   )

   ;;; find the real cell print-names in the pattern
   (bind ?real-cells (create$))
   (foreach ?row ?*rows*
      (foreach ?col ?*columns*
         (bind ?cll (cell-index ?row ?col))
         (bind ?entry (sub-string ?cll ?cll ?pattern-string))
         ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
         
         ;;; if the cell belongs to the pattern,
         (if (or (eq ?entry "1") (eq ?entry "X")) then
         
            ;;; add the real cell print name to the list:
            (bind ?real-cells 
               (create$ ?real-cells 
                  (sym-cat
                     (switch ?row
                        (case 1 then (row-name ?row1))
                        (case 2 then (row-name ?row2))
                        (case 3 then (row-name ?row3))
                        (case 4 then (row-name ?row4))
                        (case 5 then (row-name ?row5))
                        (case 6 then (row-name ?row6))
                     )
                     (switch ?col
                        (case 2 then (column-name ?col2))
                        (case 3 then (column-name ?col3))
                        (case 5 then (column-name ?col5))
                        (case 6 then (column-name ?col6))
                        (case 7 then (column-name ?col7))
                        (case 8 then (column-name ?col8))
                        (case 9 then (column-name ?col9))
                     )
                  )
               )
            )
         )
      )
   )
   

   ;;; assert the ORk-relation if it doesn't already exist
   (if 
      (and
         (<= ?nb-real-guardians ?*max-guardians*)
         (not
            (any-factp
               ((?rel ORk-relation))
               (and
                  (eq ?rel:context ?cont)
                  (<= ?rel:OR-size ?nb-real-guardians)
                  (eq ?rel:symmetrified FALSE)
                  (subsetp ?rel:OR-candidates ?real-guardians)
               )
            )
         )
      )
      then
      (assert
         (ORk-relation
            (OR-name EL14c84)
            (OR-complexity 14)
            (context ?cont)
            (OR-size ?nb-real-guardians)
            (symmetrified FALSE)
            (OR-candidates ?real-guardians)
         )
      )
      ;;; in such a case, print for the user what has been done:
      (if ?*print-actions* then
         (printout t crlf
            EL14c84 "-OR" ?nb-real-guardians  "-relation for digits: " ?nb1 ", " ?nb2 " and " ?nb3 " " crlf 
            "   in cells (marked #): " ?real-cells " " crlf 
            "   with " ?nb-real-guardians " guardians (in cells marked @) : " (print-list-of-labels ?real-guardians) " " crlf 
         )
         ;;; find the real cell indices in the pattern
         (bind ?real-cell-indices (create$))
         (foreach ?row ?*rows*
            (foreach ?col ?*columns*
               (bind ?cll (cell-index ?row ?col))
               (bind ?entry (sub-string ?cll ?cll ?pattern-string))
               ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
               
               ;;; if the cell belongs to the pattern,
               (if (or (eq ?entry "1") (eq ?entry "X")) then
               
                  ;;; add the real cell index to the list:
                  (bind ?real-cell-indices 
                     (create$ ?real-cell-indices 
                        (cell-index
                           (switch ?row
                              (case 1 then ?row1)
                              (case 2 then ?row2)
                              (case 3 then ?row3)
                              (case 4 then ?row4)
                              (case 5 then ?row5)
                              (case 6 then ?row6)
                           )
                           (switch ?col
                              (case 2 then ?col2)
                              (case 3 then ?col3)
                              (case 5 then ?col5)
                              (case 6 then ?col6)
                              (case 7 then ?col7)
                              (case 8 then ?col8)
                              (case 9 then ?col9)
                           )
                        )
                     )
                  )
               )
            )
         )
         ;;; variable ?real-cell-indices is now available to the rule
         (pretty-print-mark-current-resolution-state ?real-cell-indices ?real-guardians)
      )
   )
)


;;; row-column symmetric version of the original pattern
;;; (redundant for symmetric patterns)
;;;     +-------+-------+-------+
;;;     ! . . . ! . . . ! . . . ! 
;;;     ! . . X ! . . X ! . . . ! 
;;;     ! . X . ! . X . ! . . . ! 
;;;     +-------+-------+-------+
;;;     ! . . . ! . . . ! . . . ! 
;;;     ! . . X ! . X . ! . . . ! 
;;;     ! . X . ! X . . ! . . . ! 
;;;     +-------+-------+-------+
;;;     ! . . . ! X . . ! . . . ! 
;;;     ! . . X ! X . . ! . . . ! 
;;;     ! X X . ! . . X ! . . . ! 
;;;     +-------+-------+-------+
;;;
;;; ...........X..X....X..X...............X.X.....X.X........X.......XX.....XX...X...
;;;
;;; Variables in the following rule are named after this pattern



(defrule activate-3-digit-pattern-rule-EL14c84s
   (declare (salience ?*activate-ork-Imp630-14c-salience*))
   (logical
      (play)
      (context (name ?cont))
   )
=>
   (if ?*print-levels* then (printout t Entering_level EL14c84s))
   (assert (3-digit-pattern "...........X..X....X..X...............X.X.....X.X........X.......XX.....XX...X..."))
)


(defrule 3-digit-pattern-rule-EL14c84s
   (declare (salience ?*ork-Imp630-14c-salience*))
   (number ?nb1)
   (number ?nb2&:(< ?nb1 ?nb2))
   (number ?nb3&:(< ?nb2 ?nb3))
   
   (3-digit-pattern ?pattern-string)
   (test (eq (str-compare ?pattern-string "...........X..X....X..X...............X.X.....X.X........X.......XX.....XX...X..." ) 0))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row2) (column ?col3) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row2) (column ?col3) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row2) (column ?col3) (block ?blk1) (band ?bnd1) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row2) (column ?col6&~?col3) (block ?blk2&~?blk1) (band ?bnd1) (stack ?stk2&~?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row2) (column ?col6) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row2) (column ?col6) (block ?blk2) (band ?bnd1) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row3&~?row2) (column ?col2&~?col3&~?col6) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row3) (column ?col2) (block ?blk1) (band ?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row3) (column ?col2) (block ?blk1) (band ?bnd1) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row3) (column ?col5&~?col3&~?col6&~?col2) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row3) (column ?col5) (block ?blk2) (band ?bnd1) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row3) (column ?col5) (block ?blk2) (band ?bnd1) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row5&~?row2&~?row3) (column ?col3) (block ?blk4&~?blk1&~?blk2) (band ?bnd2&~?bnd1) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row5) (column ?col3) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row5) (column ?col3) (block ?blk4) (band ?bnd2) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row5) (column ?col5) (block ?blk5&~?blk1&~?blk2&~?blk4) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row5) (column ?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row5) (column ?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row6&~?row2&~?row3&~?row5) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row6) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row6) (column ?col2) (block ?blk4) (band ?bnd2) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row6) (column ?col4&~?col3&~?col6&~?col2&~?col5) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row6) (column ?col4) (block ?blk5) (band ?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row6) (column ?col4) (block ?blk5) (band ?bnd2) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row7&~?row2&~?row3&~?row5&~?row6) (column ?col4) (block ?blk8&~?blk1&~?blk2&~?blk4&~?blk5) (band ?bnd3&~?bnd1&~?bnd2) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row7) (column ?col4) (block ?blk8) (band ?bnd3) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row7) (column ?col4) (block ?blk8) (band ?bnd3) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row8&~?row2&~?row3&~?row5&~?row6&~?row7) (column ?col3) (block ?blk7&~?blk1&~?blk2&~?blk4&~?blk5&~?blk8) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row8) (column ?col3) (block ?blk7) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row8) (column ?col3) (block ?blk7) (band ?bnd3) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row8) (column ?col4) (block ?blk8) (band ?bnd3) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row8) (column ?col4) (block ?blk8) (band ?bnd3) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row8) (column ?col4) (block ?blk8) (band ?bnd3) (stack ?stk2))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row9&~?row2&~?row3&~?row5&~?row6&~?row7&~?row8) (column ?col1&~?col3&~?col6&~?col2&~?col5&~?col4) (block ?blk7) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row9) (column ?col1) (block ?blk7) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row9) (column ?col1) (block ?blk7) (band ?bnd3) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row9) (column ?col2) (block ?blk7) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row9) (column ?col2) (block ?blk7) (band ?bnd3) (stack ?stk1))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row9) (column ?col2) (block ?blk7) (band ?bnd3) (stack ?stk1))

   (candidate (context ?cont) (status cand) (number ?nb1) (row ?row9) (column ?col6) (block ?blk8) (band ?bnd3) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb2) (row ?row9) (column ?col6) (block ?blk8) (band ?bnd3) (stack ?stk2))
   (candidate (context ?cont) (status cand) (number ?nb3) (row ?row9) (column ?col6) (block ?blk8) (band ?bnd3) (stack ?stk2))

=>

   ;;; find the additional candidates ("guardians")
   (bind ?nb-real-guardians 0)
   (bind ?real-guardians (create$))
   (foreach ?row ?*rows*
      (foreach ?col ?*columns*
         (bind ?cll (cell-index ?row ?col))
         (bind ?entry (sub-string ?cll ?cll ?pattern-string))
         ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
         
         ;;; if the cell belongs to the pattern,
         (if (or (eq ?entry "1") (eq ?entry "X")) then
         
            ;;; add the relevant real guardians:
            (do-for-all-facts
               ((?c candidate))
               (and  (eq ?c:status cand)
                  (neq ?c:number ?nb1)
                  (neq ?c:number ?nb2)
                  (neq ?c:number ?nb3)
                  (eq ?c:row
                     (switch ?row
                        (case 2 then ?row2)
                        (case 3 then ?row3)
                        (case 5 then ?row5)
                        (case 6 then ?row6)
                        (case 7 then ?row7)
                        (case 8 then ?row8)
                        (case 9 then ?row9)
                     )
                  )
                  (eq ?c:column
                     (switch ?col
                        (case 1 then ?col1)
                        (case 2 then ?col2)
                        (case 3 then ?col3)
                        (case 4 then ?col4)
                        (case 5 then ?col5)
                        (case 6 then ?col6)
                     )
                  )
               )
               (bind ?nb-real-guardians (+ ?nb-real-guardians 1))
               (bind ?real-guardians (create$ ?real-guardians ?c:label))
            )
         )
      )
   )

   ;;; find the real cell print-names in the pattern
   (bind ?real-cells (create$))
   (foreach ?row ?*rows*
      (foreach ?col ?*columns*
         (bind ?cll (cell-index ?row ?col))
         (bind ?entry (sub-string ?cll ?cll ?pattern-string))
         ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
         
         ;;; if the cell belongs to the pattern,
         (if (or (eq ?entry "1") (eq ?entry "X")) then
         
            ;;; add the real cell print name to the list:
            (bind ?real-cells 
               (create$ ?real-cells 
                  (sym-cat
                     (switch ?row
                        (case 2 then (row-name ?row2))
                        (case 3 then (row-name ?row3))
                        (case 5 then (row-name ?row5))
                        (case 6 then (row-name ?row6))
                        (case 7 then (row-name ?row7))
                        (case 8 then (row-name ?row8))
                        (case 9 then (row-name ?row9))
                     )
                     (switch ?col
                        (case 1 then (column-name ?col1))
                        (case 2 then (column-name ?col2))
                        (case 3 then (column-name ?col3))
                        (case 4 then (column-name ?col4))
                        (case 5 then (column-name ?col5))
                        (case 6 then (column-name ?col6))
                     )
                  )
               )
            )
         )
      )
   )
   

   ;;; assert the ORk-relation if it doesn't already exist
   (if 
      (and
         (<= ?nb-real-guardians ?*max-guardians*)
         (not
            (any-factp
               ((?rel ORk-relation))
               (and
                  (eq ?rel:context ?cont)
                  (<= ?rel:OR-size ?nb-real-guardians)
                  (eq ?rel:symmetrified FALSE)
                  (subsetp ?rel:OR-candidates ?real-guardians)
               )
            )
         )
      )
      then
      (assert
         (ORk-relation
            (OR-name EL14c84s)
            (OR-complexity 14)
            (context ?cont)
            (OR-size ?nb-real-guardians)
            (symmetrified FALSE)
            (OR-candidates ?real-guardians)
         )
      )
      ;;; in such a case, print for the user what has been done:
      (if ?*print-actions* then
         (printout t crlf
            EL14c84s "-OR" ?nb-real-guardians  "-relation for digits: " ?nb1 ", " ?nb2 " and " ?nb3 " " crlf 
            "   in cells (marked #): " ?real-cells " " crlf 
            "   with " ?nb-real-guardians " guardians (in cells marked @) : " (print-list-of-labels ?real-guardians) " " crlf 
         )
         ;;; find the real cell indices in the pattern
         (bind ?real-cell-indices (create$))
         (foreach ?row ?*rows*
            (foreach ?col ?*columns*
               (bind ?cll (cell-index ?row ?col))
               (bind ?entry (sub-string ?cll ?cll ?pattern-string))
               ;;; note that the entry is "" and nothing happens if ?pattern-string lentgh is shorter than 81
               
               ;;; if the cell belongs to the pattern,
               (if (or (eq ?entry "1") (eq ?entry "X")) then
               
                  ;;; add the real cell index to the list:
                  (bind ?real-cell-indices 
                     (create$ ?real-cell-indices 
                        (cell-index
                           (switch ?row
                              (case 2 then ?row2)
                              (case 3 then ?row3)
                              (case 5 then ?row5)
                              (case 6 then ?row6)
                              (case 7 then ?row7)
                              (case 8 then ?row8)
                              (case 9 then ?row9)
                           )
                           (switch ?col
                              (case 1 then ?col1)
                              (case 2 then ?col2)
                              (case 3 then ?col3)
                              (case 4 then ?col4)
                              (case 5 then ?col5)
                              (case 6 then ?col6)
                           )
                        )
                     )
                  )
               )
            )
         )
         ;;; variable ?real-cell-indices is now available to the rule
         (pretty-print-mark-current-resolution-state ?real-cell-indices ?real-guardians)
      )
   )
)


