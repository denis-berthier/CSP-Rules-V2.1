.xx noindex
.MT 4
.TL
A 9x9 sudoku solver and generator

.H 1 "Introduction"
.BR sudoku (1)
solves and generates 9x9
.xx link="http://en.wikipedia.org/wiki/Sudoku/	sudoku"
puzzles.
It has a command line interface with text and static postscript output.
Look elsewhere for GUI solvers.

.H 1 "Constraints"
The solver uses depth first and/or breadth first tree search with
constraint propagation to prune the search for the next best move
(forms of
.xx link="http://citeseer.ist.psu.edu/context/5729/0	forward checking.)"
There are space/time tradeoffs between depth/breadth first search and
the constraints used;
.BR sudoku (1)
has options to control the combinations.
The common characteristic for all constraints, here and elsewhere, is that
they avoid
.IR "trial and error" .
Its fine for a computer to guess and backtrack but a definite breach of
puzzle manners to require a human to do so.
.P
The constraints are:
.VL 6
.LI
.B F 
Forced cell: only one value possible.
.LI
.B N
Only cell: only one value in row/col/box.
.LI
.B B
Box claim: only value in row/col within a box.
.LI
.B T
Tuple: N exact or hidden N-tuples in row/col/box.
.LI
.B X
Singleton cycle: one or more weak edges (x-wing/swordfish.) Requires B.
.LI
.B Y
Pair cycle: one optional non-pair vertex (xy-wing/coloring.)
.LI
.B W
Row/col claim: classic N-row/col x-wing/swordfish.
.LE
.P
The
.I "constraint set"
is the set of constraints applied to solve a puzzle.
All constraint sets contain at least
.BR F .
The
.B FN
constraint set is common to most machine and human solvers.
.P
.I "Clue cells"
are the givens or initial known cell values.
.I "Solution cells"
are the non-clue cells that must be filled in to produce a puzzle solution.
A
.I "candidate value"
is one of many possible values for a solution cell.
Candidate values are
.I eliminated
as solution cells become filled in.
A solution cell is
.I pinned
or
.I forced
when all but one of its candidate values is eliminated.
A puzzle is
.I solved
when all solution cells are pinned.
.P
.I "Constraint propagation"
is the process of applying constraints to either pin solution cell values
or eliminate solution cell candidate values.
The solver propagates constraints in the left to right order
.BR FNBTXYW .
When a constraint makes progress (by pinning or elimination)
the constraints are reapplied starting with
.BR F .
This means that a constraint is not attempted until all constraints
before it fail to make progress.
.P
A
.I valid
puzzle has exactly one solution.
A
.I minimal
puzzle has a minimal number of clues.  Removing any clue in a minimal
puzzle results in an invalid puzzle with multiple solutions.
A
.I constrained
puzzle is solved by constraint propagation.
An
.I unconstrained
puzzle requires trial and error (guessing) to produce a solution.
A
.I proper
puzzle is valid and constrained.
Almost all newspaper puzzles (save typos) are proper.
.P
The 
.B X
and
.B Y
constraints are cycle based generalizations of x-wing, swordfish, xy-wing
and coloring techniques.
The
.B XYW
constraints are detailed in the next sections.
See
.xx link="http://www.angusj.com/sudoku/hints.php	Angus Johnson"
and
.xx link="http://www.paulspages.co.uk/sudoku/howtosolve/	Paul Stephens"
for details on the
.BR FNBTW
constraints.

.H 1 "X Constraints"
.B X
constraints are cycles composed of sequences of strong and weak edges between cells
with the same candidate value within a single row/col/box. 
The vertices of a strong edge are the only cells with the candidate value within the
row/col/box containing the edge.
If a strong or weak edge vertex is assigned the candidate value then the other vertex
in the edge is not assigned the candidate value.
The converse holds for strong edges only: if a strong edge vertex is not assigned the
candidate value then the other vertex is assigned the candidate value.
.P
There are three
.B X
cycle forms based on strong/weak sequence combinations within the cycle:
.NL
.LI
Odd strong edge sequences connected by one weak edge.
Weak edge cells not participating in the cycle may
be eliminated.
.LI
One even strong edge sequence and zero or more odd
strong edge sequences connected by one weak edge.
The end cells of the even strong sequence may be eliminated.
.LI
One odd strong edge sequence connected by two weak edges.
The middle cell of the weak sequence may be eliminated.
.LE
.P
.B X
cycles handle x-wings and many, but not all, N-row/col swordfish configurations.
The
.B W
constraint covers the swordfish configurations not handled by the
.B X
constraint.
.P
In the examples that follow, the initial puzzle is listed
as an 81 character string in row order.
Puzzle image strong X edges are red, strong Y edges are purple,
weak edges are green, and eliminated cell values are blue.
The PNG image files were generated by first determining the cycles of interest:
.EX
sudoku -v2 \fIexample\fP.dat | grep x-
.EE
then generating the PostScript for cycle
.IR N :
.EX
sudoku -ehp -kC\fIN\fP \fIexample\fP.dat > \fIexample\fP.ps
.EE
and finally converting the PostScript to PNG using the ImageMagick
.BR convert (1)
command:
.EX
convert -crop 490x490+60+44 -scale 55% \fIexample\fP.ps \fIexample\fP.png
.EE

.P
This puzzle contains an
.B X
cycle type 1 on candidate 2, type 2 on candidate 2, and
type 2 on candidate 7:
.CE
.EX
"puzzle x-1"

.sn x-1.dat
.EE
.BP category=puzzle hspace=10 vspace=10 x-1-1.png x-1-2.png x-1-3.png
.CE 0

.P
This puzzle contains an
.B X
cycle type 1 on candidate 2, type 2 on candidate 3, and
type 3 on candidate 3:
.CE
.EX
"puzzle x-2"

.sn x-2.dat
.EE
.BP category=puzzle hspace=10 vspace=10 x-2-5.png x-2-7.png x-2-6.png
.CE 0

.H 1 "Y Constraints"
.B Y
constraints are cycles composed of edges between cells with exactly two
candidate values within a single row/col/box, where at least one of the
candidate values is the same in both cells (strong edges.)
Two of the
.B Y
cycle edges may meet at a cell that contains more than two candidate values,
but has the same candidate as the other endpoints of the edges (two weak edges.)
The candidate value between the weak edges may be eliminated.
Check
.xx link="ternary.html	here"
for a description of the mathematics behind X and Y cycles.

This puzzle contains
.B Y
cycles on candidates 7 and 1.
.CE
.EX
"puzzle y-1"

.sn y-1.dat
.EE
.BP category=puzzle hspace=10 vspace=10 y-1-1.png y-1-2.png
.CE 0

This puzzle contains
.B Y
cycles on candidates 3 and 5.
The second one has 21 edges, arguably beyond human perseverence.
.CE
.EX
"puzzle y-2"

.sn y-2.dat
.EE
.BP category=puzzle hspace=10 vspace=10 y-2-3.png y-2-14.png
.CE 0

.H 1 "W Constraints"
The
.B W
constraints handle non-cyclic swordfish configurations not covered by the cyclic
.B X
constraints.

.P
This puzzle contains a 3 row swordfish on candidate 7:
.CE
.EX
"puzzle w-1"

.sn w-1.dat
.EE
.BP category=puzzle hspace=10 vspace=10 w-1-1.png
.CE 0

.H 1 "Constrained Puzzles and Magic Cells"

A
.I "magic cell"
set is the smallest set of solution cells with the
smallest number of candidate values that produces a constrained puzzle.
.RI ( "Magic cell"
was coined by Vegard Hanssen in a private communication.
The
.I "smallest number of candidate values"
qualification makes magic
cells more human friendly, e.g.,
it limits the number of guesses when magic cell sets are provided
as hints for solving unconstrained puzzles.)
A puzzle with
.I M
magic cells for constraint set
.I C
is
.IB C-M- constrained. 
A
.IB C- 0-constrained
puzzle is
.IB C- constrained.
If
.I C
is
.B FN
then it may be dropped from the notation.
For example,
.BR constrained ,
.BR 0-constrained ,
and
.B FN-0-constrained
are equivalent, and an
.B FNW-constrained
puzzle requires an x-wing or swordfish to solve without trial and
error.

.P
The
.I "canonical solution"
is a puzzle solution transformed to have the smallest lexicographic
catenation of row column order cell values with the top left box
labeled 123/456/789.
The
.I "canonical magic cell set"
is the smallest set of solution cells with the smallest number of
candidate values and the smallest row column order position within the
canonical solution, that produces a constrained puzzle.  Each puzzle
has exactly one canonical magic cell set for a given constraint set.
Magic cells listed by
.BR sudoku (1)
are canonical.

.P
This FNBTXYW-1-constrained puzzle has canonical magic cell [1,8]
and a total of 2 magic cells:
.CE
.EX
"puzzle m-2"

.sn m-2.dat
.EE
.BP category=puzzle hspace=10 vspace=10 m-2.png
.CE 0

.P
This FNBTXYW-1-constrained puzzle has canonical magic cell [1,1]
and all solution cells are magic, for a total of 54 magic cells:
.CE
.EX
"puzzle m-54"

.sn m-54.dat
.EE
.BP category=puzzle hspace=10 vspace=10 m-54.png
.CE 0

.P
This is one of two known FNBTXYW-2-constrained puzzle (from the ~225M survey in the next section.)
It has canonical magic cells [1,6][9,7]:
.CE
.EX
"puzzle m-2-2"

.sn m-2-2.dat
.EE
.BP category=puzzle hspace=10 vspace=10 m-2-2.png
.CE 0

.P
The other was scraped from the sudoku forums:
.CE
.EX
"puzzle m-2-3"

.sn m-2-3.dat
.EE
.BP category=puzzle hspace=10 vspace=10 m-2-3.png
.CE 0

.H 1 "Observations"
Puzzles can be classified by the constrained property (the magic cell
count.) Magic cells were computed for ~225M <= 30 clue minimal
puzzles generated over 2 days by
.BR sudoku (1),
~300K puzzles provided by
.xx link="http://www.menneske.no/sudoku/eng/	Vegard Hanssen,"
~28K puzzles scraped from
.xx link="http://www.setbb.com/phpbb/profile.php?mforum=sudoku	the sudoku forum,"
and 17 clue (the conjectured minimum) puzzles posted by
.xx link="http://www.csse.uwa.edu.au/~gordon/sudokumin.php	Gordon Royle."
.P
The puzzles were collated by equivalence class and only one member of
each class was included in the survey, resulting in 225,116,397 puzzles.
The clue distribution is:
.TS
r l.
24622	17 clues
1	18 clues
30	19 clues
2150	20 clues
78956	21 clues
1422324	22 clues
12041179	23 clues
43603113	24 clues
73718643	25 clues
61850853	26 clues
26361499	27 clues
5529490	28 clues
460016	29 clues
23080	30 clues
201	31 clues
73	32 clues
32	33 clues
20	34 clues
14	35 clues
69	36 clues
6	37 clues
1	38 clues
12	39 clues
3	40 clues
1	42 clues
1	43 clues
1	45 clues
1	47 clues
1	48 clues
1	50 clues
1	51 clues
1	52 clues
1	57 clues
1	70 clues
.TE
The 17 clue counts are skewed because of Gordon Royle's search for minimal clue puzzles.
The bulk of the surveyed puzzles were machine generated via pseudo random seeding and
this might contribute to further skewing.
A puzzle generator has to work hard to produce puzzles with less than 20 clues.
.P
The constrained (magic cell) counts are:
.TS
s cb
r l.
FN constrained counts
153,495,385	constrained
71,554,145	1-constrained
66,865	2-constrained
.TE
.TS
s cb
r l.
FNBTXYW constrained counts
211,377,110	constrained
13,739,284	1-constrained
1	2-constrained
.TE
.P
There are a few surprising results.
Even with the basic
.B FN
constraints, no 3-constrained or greater puzzle was found.
One might expect the 17 clue puzzles to be more likely 2-constrained,
but they have a distribution similar to the random puzzles:
.TS
s cb
r l.
17 clue FN constrained counts
11582	constrained
12728	1-constrained
310	2-constrained
.TE
.TS
s cb
r l.
17 clue FNBTXYW constrained counts
23903	constrained
717	1-constrained
0	2-constrained
.TE
.P
Open question: Are there any 3-constrained 9x9 sudoku puzzles?
Answer: yes.
On 2007-04-07 JPF posted this puzzle on the Player's Forum with singles backdoor size 3:
.EX
100000089000009002000000450007600000030040000900002005004070000500008010060300000
.EE
There are 3 other known singles backdoor size 3 puzzles as of 2007-04-12.

.P
The apparent rarity of 2-constrained puzzles may have implications on tree search
strategies.  If a puzzle is not constrained then it is is most likely
1-constrained, and a breadth first search of all candidate values on the solution
cells should produce a magic cell.
Any depth-first tree search that visits more than
.I "number of solution cells"
.B X
.I "number of candidate values"
nodes might have been better off using breadth first search for a magic cell.
If there are no 3-constrained puzzles then a 2 level breadth first search would
be sufficient to solve all puzzles.
In general breadth first loses to depth first on 2-constrained puzzles.

.P
Magic cells may provide hints to discovering the next "logical" constraint.
If a solver were able to determine the magic cells then it could avoid backtracking
altogether.
Magic cells may also be used as hints for unconstrained puzzles, e.g.,
.IR "determine the value for cell [r,c] and the puzzle will be constrained" .

.H 1 "Examples and timings"
The
.xx link="http://magictour.free.fr/top95	top95"
and
.xx link="http://magictour.free.fr/msk_009	contest"
puzzle sets are frequently referenced on the sudoku forum.
The counts for these puzzle sets are:
.TS
s cb
r l.
top95 FN
0	constrained
44	1-constrained
51	2-constrained
.TE
.TS
s cb
r l.
top95 FNBTXYW
42	constrained
53	1-constrained
0	2-constrained
.TE
.TS
s cb
r l.
contest FN
222	constrained
777	1-constrained
12	2-constrained
.TE
.TS
s cb
r l.
contest FNBTXYW
543	constrained
468	1-constrained
0	2-constrained
.TE

.P
Command lines and timings for
.BR sudoku (1)
compiled with gcc -O3 -march=pentium4
on linux Intel(R) Pentium(R) 4 CPU 2.80GHz follow.
The constraints selected by the -q option performed the best for each particular puzzle set.
.EX

sudoku -d -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t contest.dat
puzzles=1011 guesses=5608 iterations=29045 seconds=0.059990

sudoku -d -qFNB -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t top95.dat
puzzles=95 guesses=2231 iterations=8626 seconds=0.039993

sudoku -a -qF -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t multiple-1.tst
puzzles=957263 guesses=2013617 iterations=5283315 seconds=2.732584

sudoku -a -qF -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t multiple-2.tst
puzzles=50044975 guesses=117985466 iterations=307473894 seconds=161.486451

sudoku -d -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t FN-1-con-sym.dat   
puzzles=1183 guesses=2991 iterations=19940 seconds=0.033994

sudoku -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t FN-1-con-sym.dat   
puzzles=1183 guesses=2350 iterations=21699 seconds=0.038994

sudoku -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t FN-2-con.dat
puzzles=28948 guesses=680294 iterations=2869221 seconds=9.260592

sudoku -d -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t FN-2-con.dat
puzzles=28948 guesses=389196 iterations=1468420 seconds=3.768427

sudoku -d -qFN -f- -Fpuzzles=%n%,guesses=%Q%,iterations=%I%,seconds=%t FNBTXYW-1-con.dat
puzzles=100000 guesses=418449 iterations=2322057 seconds=5.084235

.EE

.H 1 "Conclusions"
There still seems to be more questions than conclusions about 9x9 sudoku puzzles.
A quick scan of the timing results shows that the best times occur when the
constraint set is restricted to
.B F
or
.B FN
and the solver is forced to backtrack due to the weaker constraints.
If additional constraints slow down the solver then why bother implementing them at all?
Well, coding a fast solver is a great pursuit, but it offers little to the human solver.
Pencil and paper limit human solving techniques.
Most aficionados draw the line at trial and error (basically the definition of backtracking),
and that's where the additional constraints come into play.
It is strange, though, that constraint techniques intended to aid human solvers
(to make it a pastime rather than a chore)
sometimes slow down machine solvers.
Sometimes its not the best tactic to make a machine act like a human.

.H 1 "Downloads"
Unless otherwise noted,
source and executables are covered by the
.xx link="http://www.opensource.org/licenses/cpl1.0.txt	Common Public License."
.P
The LGPL Licensed
.B "SudokuExplainer.jar" ,
by Nicolas Juillerat, contains an additional command line entry point
.BR diuf.sudoku.test.serate .
See
.BR serate (1)
for more information.
Note that some browsers may (improperly) change the
.B .jar
suffix to
.B .zip
on download; change the suffix back to
.B .jar
before using.
.TS
lb
l.
executables
.xx link="sudoku-linux.i386	linux i386 executable"
.xx link="sudoku-linux.i386-64	linux i386-64 executable"
.xx link="sudoku.exe	windows executable"
.xx link="sudoku-64.exe	windows 64 bit executable"
.xx link="testsudoku.sh	regression test script"
.xx link="testsudoku.out	expected regression test results"
.xx link="sudz-linux.i386	minlex grid compressor linux i386 executable"
.xx link="sudz-linux.pentium4	minlex grid compressor linux pentium4 optimized executable"
.xx link="sudz.exe	minlex grid compressor windows executable"
.xx link="300-416.sudz	all 2097068 grids in bands 300 through 416"
.xx link="SudokuExplainer.jar	LGPL Licensed Sudoku Explainer with ER and EP ratings"
.xx link="serate.tgz	LGPL Licensed Sudoku Explainer serate(1) source changes"
.TE
.TS
lb
l.
puzzles
.xx link="multiple-1.tst	sudoku forum multiple solution benchmark #1 (1 => 957263)"
.xx link="multiple-2.tst	sudoku forum multiple solution benchmark #2 (1 => 50044975)"
.xx link="http://magictour.free.fr/top95	sudoku forum top95 (95)"
.xx link="http://magictour.free.fr/msk_009	sudoku forum contest (1011)"
.xx link="FN-1-con-sym.dat.gz	FN-1-constrained rotational symmetric puzzles (1183)"
.xx link="FN-2-con.dat.gz	FN-2-constrained minimal mutually non-isomorphic puzzles (28948)"
.xx link="FNBTXYW-1-con-rot.dat.gz	FNBTXYW-1-constrained rotational symmetric puzzles (141)"
.xx link="FNBTXYW-1-con.dat.gz	FNBTXYW-1-constrained puzzle sample (100000)"
.xx link="FNBTXYW-2-con.dat.gz	FNBTXYW-2-constrained minimal mutually non-isomorphic puzzles (1)"
.xx link="FNBTXZ-2-constrained.dat.gz	old FNBTXZ-2-constrained, only 1 FNBTXYW-2-constrained (1453)"
.xx link="taxonomy.dat	constraint method taxonomy puzzles (126)"
.xx link="s-25-g250r3n20.dat	easy sudocoup generated order 25 sudoku (20)"
.xx link="s-25-g180r4n20.dat	easy sudocoup generated order 25 sudoku (20)"
.TE
